import telebot
import os
from dotenv import load_dotenv
from graphic_explan.dictonary import dictonary, user
from logika import*
from keyboards import*
from time import sleep
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

 
#–ó–¥–µ—Å—å –±–æ—Ç –æ–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@bot.message_handler(commands = ["start"])
def start_message(message):
    bot.send_message(message.from_user.id, "–ù–ê–ñ–ú–ò–¢–ï –ù–ê –ö–ù–û–ü–ö–£! üëáüëá '–¶–∏–∫–ª—ã' –ª–∏–±–æ '–ü–æ–º–æ—â—å'", 
                     reply_markup=reply_markup())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    

@bot.message_handler(func=lambda message: message.text == "–¶–∏–∫–ª—ã")
def start_message(message):
    bot.send_message(
        message.from_user.id,
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º —Ü–∏–∫–ª–∞!üëá",
        reply_markup=gen_markup(),  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    )


@bot.message_handler(func=lambda message: message.text == "–ö—É—Ä—Å—ã USD, CNY")
def start_message(message):
    usd, cny = currency()
    bot.send_message(message.chat.id, f"–î–æ–ª–ª–∞—Ä={usd}, –Æ–∞–Ω—å={cny}")


@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def start_message(message):
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")

# –õ–æ–≥–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ G-–∫–æ–¥–µ
def func_generator():
    '''–ó–∞–ø–æ–ª–Ω—è—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'''
    @bot.message_handler(func=lambda message: True)
    def echo_all(message):
        try:  
            user_id = message.from_user.id
            print(message.from_user.first_name, message.text)
            number, erorrs = func_error(message.text, user[user_id].number_dict["number"], len(user[user_id].conditions['kelb']))
            user[user_id].number_dict["number"] = number
            if erorrs != None:
                bot.send_message(message.from_user.id, erorrs)
            if number <= len(user[user_id].conditions['kelb']) - 1:
                try:
                    msg = open(user[user_id].conditions['kelb'][number][1], '+rb')
                    bot.send_photo(message.chat.id, msg, caption = user[user_id].conditions['kelb'][number][0])
                except:
                    bot.send_message(message.chat.id, user[user_id].conditions['kelb'][number])
    ##############################################################################
            if user[user_id].conditions['kelb'] == dictonary["round_pocket"
                ] or user[user_id].conditions['kelb'] == dictonary["rectangular_pocket"
                ] or user[user_id].conditions['kelb'] == dictonary["radius_pocket"
                ] or user[user_id].conditions['kelb'] == dictonary["milling _plane"
                ] or user[user_id].conditions['kelb'] == dictonary["conical_thread"]:
                '''–£—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ G-–∫–æ–¥–∞'''
                if number > 0 and erorrs == None:
                    user[user_id].text_nc["text"] += f"#{number} = {message.text}\n"
                if number == len(user[user_id].conditions["kelb"]):
                    generating_file(user[user_id].conditions['kelb'], user_id)
                    bot.send_document(message.from_user.id, document=open('O0001.nc', 'rb'))
            elif user[user_id].conditions['kelb'] == dictonary["cutting_mode"]:
                '''–£—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–∑–∞–Ω–∏—è'''
                if number > 0 and erorrs == None:
                    user[user_id].working_dict["list"].append(message.text)
                if number == len(user[user_id].conditions["kelb"]):
                    turnovers, supply = mathematics(user[user_id].working_dict["list"])
                    if supply != None:
                        bot.send_message(message.from_user.id, f'—á–∏—Å–ª–æ –æ–±–æ—Ä–æ—Ç–æ–≤ = {turnovers} \n–ü–æ–¥–∞—á–∞ = {supply}')
                    else:
                        bot.send_message(message.from_user.id, turnovers)
            elif user[user_id].conditions['kelb'] == dictonary["degrees_decimal"]:
                '''–£—Å–ª–æ–≤–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É–≥–ª–∞ –∏ —Ä–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'''
                if number > 0 and erorrs == None:
                    user[user_id].working_dict["list"].append(message.text)
                if number == len(user[user_id].conditions["kelb"]):
                    ugol, osy = decimal_angle(user[user_id].working_dict["list"])
                    if osy != None:
                        bot.send_message(message.from_user.id, f'–£–≥–æ–ª = {ugol} \n–û—Å—å –• = {osy[0]}, –û—Å—å –£ = {osy[1]}')
                    else:
                        bot.send_message(message.from_user.id, ugol)
        except Exception as er:
            print(er)   



@bot.callback_query_handler(func=lambda callback_query: True)
def dog_answer(callback_query):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id)
    
    user_id = callback_query.from_user.id
    user[user_id] = User(user_id) 
    bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é –ë–£–ö–í–£')
    user[user_id].conditions['kelb'] = dictonary[callback_query.data]
    func_generator()


if __name__ == "__main__":
    while True:
        try:
            print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
            bot.infinity_polling(none_stop=True)
        except:
            sleep(0.3) 
