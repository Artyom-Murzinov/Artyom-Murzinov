from bs4 import BeautifulSoup
import requests
import re
from math import *
import json
from dotenv import load_dotenv
import os
load_dotenv()
token = os.getenv("token")
headers = {"Authorization": f"OAuth {token}"}
params = {"path": "dictionary_data/metal_densities.json"}



class PriceCalculator:
    """–ö–ª–∞—Å—Å —Å—á–∏—Ç–∞–µ—Ç –≤–µ—Å –∏ —Ü–µ–Ω—É –∑–∞–≥–æ—Ç–æ–≤–∫–∏"""
    def __init__(self, profile, alloy, size, length, wall_thickness):
        self.alloy_density = list()                     #–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–ø–ª–∞–≤–∞
        self.alloy = alloy                              #–°–ø–ª–∞–≤
        self.profile = profile                          #–ü—Ä–æ—Ñ–∏–ª—å
        self.size = float(size)                         #–†–∞–∑–º–µ—Ä
        self.length = float(length)                     #–î–ª–∏–Ω–∞
        self.wall_thickness = float(wall_thickness)     #–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏

    def __str__(self):
        return  PriceCalculator.workpiece_cost(self)
    
    
    def alloy_search(self, alloy_grade, alloy):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤—è–µ—Ç –ø–æ–∏—Å–∫ –º–∞—Ä–∫—É —Å—Ç–∞–ª–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ä–∫—É –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å"""
        if isinstance (alloy_grade, dict):            
            for key, value in alloy_grade.items(): 
                PriceCalculator.alloy_search(self, alloy_grade[key], alloy)
                if key.lower() == alloy.lower():
                    self.alloy_density = key, value
            return self.alloy_density
        return None

    def alloy_price_search(self):
        """–î–æ—Å—Ç–∞—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–ª–∞–≤–∞ –∏ –≤—ã—Å—á–∏—Ç—ã–≤–∞—é —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–ø–ª–∞–≤–∞"""
        price = 0
        number = 0
        patterns = r'[0-9][^a-z="<>/]*'
        yandex_url = "https://cloud-api.yandex.net/v1/disk/resources/download"
        emetal_url = f"https://e-metall.ru/{self.profile}/?item_steel_mark={self.alloy}"

        # —Ç—É—Ç –∏–∑ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—é —Ñ–∞–π–ª json –∏ –æ—Ç–ø—Ä–∞–≤—è–ª—é –≤ —Ä–µ–∫—É—Ä—Å–∏—é 
        yandex_disk = requests.get(yandex_url, headers=headers, params=params)
        href = yandex_disk.json()['href']
        yandex_response = requests.get(href)
        yandex_response.encoding = 'utf-8'
        self.alloy_grade = yandex_response.json()
        PriceCalculator.alloy_search(self, self.alloy_grade, self.alloy)


        metal_response = requests.get(emetal_url)
        bs = BeautifulSoup(metal_response.content, "html5lib" )    
        for tag in bs.find_all('td'):
            if '–¶–µ–Ω–∞, —Ä—É–± —Å –ù–î–°' in str(tag):
                try:
                    if "—à—Ç" not in str(tag):
                        if "—Ç" in str(tag) or "–∫–≥" in str(tag):                  
                            price += float(re.findall(patterns, str(tag))[0][:-3].replace(' ', '')) 
                            number += 1               
                except:
                    pass
        try:
            self.new_price = round(price/number/1000, 2)
        except:
            self.new_price = 0
        

    def workpiece_cost(self):
        """–î–µ–ª–∞—é —Ä–∞—Å—á–µ—Ç –≤–µ—Å–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏, —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫–∏, —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–ª–∞–≤–∞ –∑–∞ 1 –∫–≥"""
        PriceCalculator.alloy_price_search(self)
        try:
            if self.profile.lower() == '–∫—Ä—É–≥':
                body_weight = (pi * self.size**2/4 * self.length * self.alloy_density[1][0]) / 1000000
            elif self.profile.lower() == '–∫–≤–∞–¥—Ä–∞—Ç':
                body_weight = (self.size**2 * self.length * self.alloy_density[1][0]) / 1000000
            elif self.profile.lower() == '—à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫':
                body_weight = (((self.size/2)**2/sqrt(3))*6 * self.length * self.alloy_density[1][0]) / 1000000
            elif self.profile.lower() == '—Ç—Ä—É–±–∞':
                body_weight = (((pi * self.size**2 / 4) - (pi * (self.size - self.wall_thickness * 2)**2 / 4))* self.length * self.alloy_density[1][0])/1000000
            elif self.profile.lower() == '–ª–∏—Å—Ç':
                body_weight = (self.size * self.wall_thickness * self.length * self.alloy_density[1][0]) / 1000000
            return f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∫–≥={self.new_price}—Ä—É–±, –ú–∞—Å—Å–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏={round(body_weight, 4)}–∫–≥, –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫–∏={round(body_weight * self.new_price, 2)}—Ä—É–±'
        except:
            return f'–¢–∞–∫–æ–≥–æ –Ω–µ—Ç, –≤ —Å–∫–æ—Ä–æ–º –ø–æ—è–≤–∏—Ç—Å—è, –∏–∑–≤–∏–Ω–∏—Ç–µ!üòä'


#alloy='40—Ö'
#profile = "–∫—Ä—É–≥"
#size = 25      #–†–∞–∑–º–µ—Ä 
#wall_thickness = None
#length = 300 #–î–ª–∏–Ω–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏

#density = PriceCalculator(profile, alloy, size, length, wall_thickness)
#print(density)
